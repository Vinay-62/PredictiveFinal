# -*- coding: utf-8 -*-
"""LVADSUSR131_Vinay_FA_LAB4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZKCCtyjmW70Iuo6f7I1Wo0iP3dGhDK1r
"""

#Anomaly detection

#import necessary libraries
import pandas as pd
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv("/content/social_network.csv")

#labelencoder for account_status
label=LabelEncoder()
df["account_status"]=label.fit_transform(df["account_status"])
#print(df.account_status)

#check if they are null values
df.isnull().sum()
#there are no null values

#Features for anomaly detection
features=["account_status","login_activity", "posting_activity", "social_connections"]
# Create a new dataframe with selected features
X = df[features]
model = IsolationForest(n_estimators=100, contamination=0.1,max_features = 4, max_samples=10000, random_state=42)

# Fit Isolation Forest with features to the model
model.fit(X)

# Predict the anomalies in the data
y_pred = model.predict(X)
#print(y_pred) ## should be +1 or -1

# Add the predicted anomaly scores to dataframe
df["anomaly_score"] = model.decision_function(X)

#By using decision function we can get scores between -1 and 1
#let us take the values below 0 as anomalies

anomalies = df.loc[df["anomaly_score"] < 0]
#print(anomalies)

# predict the values whether they are anomalies or not
x=df[["account_status","login_activity", "posting_activity", "social_connections"]]
df_values=x.values

f=df_values

r=[]
for i in f:
  z=model.predict([i])
  if z==[1]:
    r.append('Not Anomaly')
  elif z==[-1]:
    r.append('Anomaly')

df['Anomaly']=r
#print(df)

# Create a scatter plot of suspicious activity vs social connections.
plt.scatter(df["social_connections"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["social_connections"], anomalies["anomaly_score"], color="red", label="Anomaly")
plt.xlabel("Social Connections")
plt.ylabel("Anomaly_Score")
plt.legend()
plt.show()

df.head()