# -*- coding: utf-8 -*-
"""LVADSUSR131_Vinay_FA_LAB3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KWXVVM5V_cPTkXGY42Wy9KoVzn65KET5
"""

# Commented out IPython magic to ensure Python compatibility.
#Clustering

#import requires libraries
import warnings
warnings.filterwarnings("ignore")
from sklearn.cluster import KMeans
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
# %matplotlib inline

#read csv file
df = pd.read_csv("/content/seeds.csv")
print(df.head())

#check if there are null values and fill them
df.isnull().sum()
df = df.fillna(method='ffill')

#check for outliers
plt.boxplot(df['Area'])
plt.show()

plt.boxplot(df['Perimeter'])
plt.show()

#Using minmaxscaler we can get clear data
minmax = MinMaxScaler()
minmax.fit(df[['Area']])
df['Area'] = minmax.transform(df[['Area']])
minmax.fit(df[['Perimeter']])
df['Perimeter']=minmax.transform(df[['Perimeter']])

#Plot a elbow plot using plot function to get the correct value of no of clusters we want to take
sse = []
k_range = range(1,10)
for k in k_range:
   km = KMeans(n_clusters=k)
   km.fit(df)
   sse.append(km.inertia_)

#sse means sum of squared error

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_range,sse)

#fitting and predicting the model

km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df)
y_predicted
df['cluster']=y_predicted

#cluster_centers are nothing but centroids for each cluster we get
print(km.cluster_centers_)

#plot a scatter plot to get the clusters and their centroids
df1 = df[df.cluster==0]
#print(df1)
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]


plt.scatter(df1.cluster ,df1['Area'],color='green')
plt.scatter(df2.cluster,df2['Area'],color='red')
plt.scatter(df3.cluster ,df3['Area'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Cluster')
plt.ylabel('Area')
plt.legend()